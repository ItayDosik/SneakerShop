@model SneakerShop.ViewModels.productManagement;


@{
    ViewData["Title"] = "Manage Supply";
}


<style>

    .searchBtn {
        width: 50%;
        margin-left: auto;
        margin-right: auto;
        background-color: lightblue;
    }

    .mybtn {
        width: 25%;
        margin-left: auto;
        margin-right: auto;
        background-color: lightblue;
    }

    .card-header {
    }

    .custom-select {
        width: auto; 
        max-width: 150px; 
    }

</style>


<body>

    <div class="container w-25">

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <button type="button" class="btn btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                @TempData["ErrorMessage"]
            </div>
        }
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <button type="button" class="btn btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                @TempData["SuccessMessage"]
            </div>
        }
    </div>

    <div class="container-fluid">
        <div class="row">
            <nav class="col-md-2 d-none d-md-block bg-light sidebar">
                <div class="sidebar-sticky">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link" asp-action="Index" asp-controller="Dashboard">
                                <i class="fa-solid fa-house"></i>
                                Dashboard
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-action="manageSupply" asp-controller="Dashboard">
                                <i class="fa-solid fa-box"></i>
                                Supply
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-action="productManagement" asp-controller="Dashboard">
                                <i class="fa-solid fa-cart-shopping"></i>
                                Products
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" asp-action="userManagement" asp-controller="Dashboard">
                                <i class="fa-solid fa-users"></i>
                                Customers
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <main role="main" class="col-md-9 ml-sm-auto col-lg-10 pt-3 px-4">
                <div class="chartjs-size-monitor" style="position: absolute; inset: 0px; overflow: hidden; pointer-events: none; visibility: hidden; z-index: -1;"><div class="chartjs-size-monitor-expand" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="chartjs-size-monitor-shrink" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div></div>
                <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
                    <h1 class="h2">Manage Supply</h1>
                    <div class="btn-toolbar mb-2 mb-md-0">
                    </div>
                </div>

                    <form id="updateQuantityForm" action="updateProductQuantities" method="post">
                        <table class="table">
                            <thead class="thead-light">
                                <tr>
                                    <th>Product Id</th>
                                    <th>Product Name</th>
                                    <th>Quantity in Store</th>
                                    <th>Price</th>
                                    <th>Order</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in Model.products)
                                {
                                    <tr>
                                        <td>@product.ProductId</td>
                                        <td>@product.ProductName</td>
                                        <td>@product.Qnt</td>
                                        <td>@product.Price</td>
                                        <td>
                                            <input type="number" class="quantity-input" name="products[@product.ProductId]" value="0" min="0" max="100" />
                                        </td>
                                    </tr>
                                    <input type="hidden" name="productId_@product.ProductId" value="@product.ProductId" class="product-id-input" />
                                    <input type="hidden" name="quantity_@product.ProductId" value="@product.Qnt" class="quantity-hidden-input" />
                                }
                            </tbody>
                        </table>
                        <button type="submit" class="btn btn-primary">Submit Order</button>
                    </form>
            </main>
        </div>
    </div>




</body>




<script>
    document.addEventListener('DOMContentLoaded', function () {
        const quantityInputs = document.querySelectorAll('.quantity-input');
        const productIdInputs = document.querySelectorAll('.product-id-input');

        // Update hidden inputs with current quantity values when form is submitted
        document.getElementById('updateQuantityForm').addEventListener('submit', function (event) {
            for (let i = 0; i < quantityInputs.length; i++) {
                const productId = productIdInputs[i].value;
                const quantity = quantityInputs[i].value;

                // Update the corresponding hidden input value
                const hiddenInput = document.querySelector(`input[name="products[${productId}].Qnt"]`);
                hiddenInput.value = quantity;
            }
        });
    });
</script>



<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.js"></script>